/* Auto-generated by genmsg_cpp for file /home/mckoval/ros-diamondback/navi_stack/camera_pose/camera_pose_calibration/msg/CameraPose.msg */
#ifndef CAMERA_POSE_CALIBRATION_MESSAGE_CAMERAPOSE_H
#define CAMERA_POSE_CALIBRATION_MESSAGE_CAMERAPOSE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/Pose.h"

namespace camera_pose_calibration
{
template <class ContainerAllocator>
struct CameraPose_ : public ros::Message
{
  typedef CameraPose_<ContainerAllocator> Type;

  CameraPose_()
  : camera_id()
  , pose()
  {
  }

  CameraPose_(const ContainerAllocator& _alloc)
  : camera_id(_alloc)
  , pose(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  camera_id;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;


private:
  static const char* __s_getDataType_() { return "camera_pose_calibration/CameraPose"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "eb4c53d8c0c861e2c5d562bd921bb38e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string camera_id\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, camera_id);
    ros::serialization::serialize(stream, pose);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, camera_id);
    ros::serialization::deserialize(stream, pose);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(camera_id);
    size += ros::serialization::serializationLength(pose);
    return size;
  }

  typedef boost::shared_ptr< ::camera_pose_calibration::CameraPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_pose_calibration::CameraPose_<ContainerAllocator>  const> ConstPtr;
}; // struct CameraPose
typedef  ::camera_pose_calibration::CameraPose_<std::allocator<void> > CameraPose;

typedef boost::shared_ptr< ::camera_pose_calibration::CameraPose> CameraPosePtr;
typedef boost::shared_ptr< ::camera_pose_calibration::CameraPose const> CameraPoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::camera_pose_calibration::CameraPose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::camera_pose_calibration::CameraPose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace camera_pose_calibration

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::camera_pose_calibration::CameraPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb4c53d8c0c861e2c5d562bd921bb38e";
  }

  static const char* value(const  ::camera_pose_calibration::CameraPose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb4c53d8c0c861e2ULL;
  static const uint64_t static_value2 = 0xc5d562bd921bb38eULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_pose_calibration::CameraPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "camera_pose_calibration/CameraPose";
  }

  static const char* value(const  ::camera_pose_calibration::CameraPose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::camera_pose_calibration::CameraPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string camera_id\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::camera_pose_calibration::CameraPose_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::camera_pose_calibration::CameraPose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.camera_id);
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CameraPose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_pose_calibration::CameraPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::camera_pose_calibration::CameraPose_<ContainerAllocator> & v) 
  {
    s << indent << "camera_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_id);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CAMERA_POSE_CALIBRATION_MESSAGE_CAMERAPOSE_H


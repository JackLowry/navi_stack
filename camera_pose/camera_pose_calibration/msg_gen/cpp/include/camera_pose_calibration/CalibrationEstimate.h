/* Auto-generated by genmsg_cpp for file /home/mckoval/ros-diamondback/navi_stack/camera_pose/camera_pose_calibration/msg/CalibrationEstimate.msg */
#ifndef CAMERA_POSE_CALIBRATION_MESSAGE_CALIBRATIONESTIMATE_H
#define CAMERA_POSE_CALIBRATION_MESSAGE_CALIBRATIONESTIMATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"
#include "camera_pose_calibration/CameraPose.h"
#include "geometry_msgs/Pose.h"

namespace camera_pose_calibration
{
template <class ContainerAllocator>
struct CalibrationEstimate_ : public ros::Message
{
  typedef CalibrationEstimate_<ContainerAllocator> Type;

  CalibrationEstimate_()
  : header()
  , cameras()
  , targets()
  {
  }

  CalibrationEstimate_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , cameras(_alloc)
  , targets(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::camera_pose_calibration::CameraPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_pose_calibration::CameraPose_<ContainerAllocator> >::other >  _cameras_type;
  std::vector< ::camera_pose_calibration::CameraPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_pose_calibration::CameraPose_<ContainerAllocator> >::other >  cameras;

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _targets_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  targets;


  ROS_DEPRECATED uint32_t get_cameras_size() const { return (uint32_t)cameras.size(); }
  ROS_DEPRECATED void set_cameras_size(uint32_t size) { cameras.resize((size_t)size); }
  ROS_DEPRECATED void get_cameras_vec(std::vector< ::camera_pose_calibration::CameraPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_pose_calibration::CameraPose_<ContainerAllocator> >::other > & vec) const { vec = this->cameras; }
  ROS_DEPRECATED void set_cameras_vec(const std::vector< ::camera_pose_calibration::CameraPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_pose_calibration::CameraPose_<ContainerAllocator> >::other > & vec) { this->cameras = vec; }
  ROS_DEPRECATED uint32_t get_targets_size() const { return (uint32_t)targets.size(); }
  ROS_DEPRECATED void set_targets_size(uint32_t size) { targets.resize((size_t)size); }
  ROS_DEPRECATED void get_targets_vec(std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other > & vec) const { vec = this->targets; }
  ROS_DEPRECATED void set_targets_vec(const std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other > & vec) { this->targets = vec; }
private:
  static const char* __s_getDataType_() { return "camera_pose_calibration/CalibrationEstimate"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "35dff6bdb713fbc8b83861a1960b45f5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
CameraPose[] cameras\n\
geometry_msgs/Pose[] targets\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: camera_pose_calibration/CameraPose\n\
string camera_id\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, cameras);
    ros::serialization::serialize(stream, targets);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, cameras);
    ros::serialization::deserialize(stream, targets);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(cameras);
    size += ros::serialization::serializationLength(targets);
    return size;
  }

  typedef boost::shared_ptr< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator>  const> ConstPtr;
}; // struct CalibrationEstimate
typedef  ::camera_pose_calibration::CalibrationEstimate_<std::allocator<void> > CalibrationEstimate;

typedef boost::shared_ptr< ::camera_pose_calibration::CalibrationEstimate> CalibrationEstimatePtr;
typedef boost::shared_ptr< ::camera_pose_calibration::CalibrationEstimate const> CalibrationEstimateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace camera_pose_calibration

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "35dff6bdb713fbc8b83861a1960b45f5";
  }

  static const char* value(const  ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x35dff6bdb713fbc8ULL;
  static const uint64_t static_value2 = 0xb83861a1960b45f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "camera_pose_calibration/CalibrationEstimate";
  }

  static const char* value(const  ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
CameraPose[] cameras\n\
geometry_msgs/Pose[] targets\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: camera_pose_calibration/CameraPose\n\
string camera_id\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.cameras);
    stream.next(m.targets);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CalibrationEstimate_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::camera_pose_calibration::CalibrationEstimate_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cameras[]" << std::endl;
    for (size_t i = 0; i < v.cameras.size(); ++i)
    {
      s << indent << "  cameras[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_pose_calibration::CameraPose_<ContainerAllocator> >::stream(s, indent + "    ", v.cameras[i]);
    }
    s << indent << "targets[]" << std::endl;
    for (size_t i = 0; i < v.targets.size(); ++i)
    {
      s << indent << "  targets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.targets[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CAMERA_POSE_CALIBRATION_MESSAGE_CALIBRATIONESTIMATE_H


diff -durp JAUS++-2.110519-src/libraries/cxutils/2.0/src/cxutils/images/png/png.cpp JAUS++-2.110519-src-patched/libraries/cxutils/2.0/src/cxutils/images/png/png.cpp
--- libraries/cxutils/2.0/src/cxutils/images/png/png.cpp	2011-05-02 08:17:14.000000000 -0500
+++ libraries/cxutils/2.0/src/cxutils/images/png/png.cpp	2012-06-08 12:29:05.962161107 -0500
@@ -77,7 +77,7 @@ namespace CxUtils
         void ReadData(png_structp png_ptr, png_bytep data, png_size_t length)
         {
             unsigned int bytesToRead = (unsigned int)length;
-            struct InputSource* input = (struct InputSource*)png_ptr->io_ptr;
+            struct InputSource* input = (struct InputSource*)png_get_io_ptr(png_ptr);
 
             if(bytesToRead > input->mImageSize - input->mNumBytesRead)
             {
@@ -150,14 +150,13 @@ int CxUtils::PNG::DecompressImage(const
         input.mpImage = (unsigned char *)png;
         input.mNumBytesRead = 0;
 
-        png_ptr->io_ptr = &input;
-        png_ptr->read_data_fn = ReadData;
+        png_set_read_fn(png_ptr, &input, ReadData);
 
         png_read_png(png_ptr, info_ptr, PNG_TRANSFORM_STRIP_16 | PNG_TRANSFORM_BGR, NULL);
 
         // Calculate size of output image in bytes.
         unsigned int outputSize;
-        outputSize = info_ptr->width*info_ptr->height*info_ptr->channels;
+        outputSize = png_get_image_width(png_ptr, info_ptr) * png_get_image_height(png_ptr, info_ptr) * png_get_channels(png_ptr, info_ptr);
 
         // Allocate memory to store the decompressed image.
         if(*image != NULL)
@@ -174,15 +173,15 @@ int CxUtils::PNG::DecompressImage(const
             *image = new unsigned char[outputSize + 100];
         }
 
-        *width = (unsigned short)info_ptr->width;
-        *height = (unsigned short)info_ptr->height;
-        *channels = (unsigned char)info_ptr->channels;
+        *width = (unsigned short)png_get_image_width(png_ptr, info_ptr);
+        *height = (unsigned short)png_get_image_height(png_ptr, info_ptr);
+        *channels = (unsigned char)png_get_channels(png_ptr, info_ptr);
 
         png_bytep * row_pointers = NULL;
         row_pointers = NULL;
 
         int row_stride = (*width)*(*channels)*sizeof(unsigned char);
-        if (info_ptr->color_type == PNG_COLOR_TYPE_RGB || info_ptr->color_type == PNG_COLOR_TYPE_GRAY)
+        if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB || png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_GRAY)
         {
             row_pointers = png_get_rows(png_ptr, info_ptr);
 
@@ -227,7 +226,7 @@ namespace CxUtils
         // Function to read data for PNG library.
         void WriteData(png_structp png_ptr, png_bytep data, png_size_t length)
         {
-            struct OutputSource* output = (struct OutputSource*)png_ptr->io_ptr;
+            struct OutputSource* output = (struct OutputSource*)png_get_io_ptr(png_ptr);
             
             if(output->mNumBytesCompressed + length > output->mCompressedBufferSize)
             {
@@ -309,8 +308,7 @@ int CxUtils::PNG::CompressImage(const un
         output.mNumBytesCompressed = 0;
         output.mpCompressedPNG = *png;
 
-        png_ptr->io_ptr = &output;
-        png_ptr->write_data_fn = WriteData;
+        png_set_write_fn(png_ptr, &output, WriteData, NULL);
 
         png_byte color;
         if (channels == 1)
